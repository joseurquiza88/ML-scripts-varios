library(googlePolylines)#!
library(paletteer)
library(leaflet)
library(ecmwfr)
library(htmltools)
library(ncdf4)
library(dplyr)
library(sp)
library(raster)
library(sf)
library(maps)
library(mapdata) #!!!
library(maptools)#!!!
library(rgdal)
library(gdalUtilities)#!!!
####library(gpclib) #!!!
library(spatstat)#!!!
####library(RGtk2)
library(MODIStsp)
####library(MODIS)
library(ggplot2)
library(ggmap)
library(lubridate)
library(rgeos)
library(reshape2)#!!!
library(dplyr)
library(lmtest)#!!!
library(tm)#!!!
library(csv)#!!!
library(csvread)#!!!
library(R.utils)#!!!
library(lattice)
library(caret)#!!!
#### library(RStoolbox)#!!!
library(RColorBrewer)
library(openair)
library(gridExtra)
library(printr)#!!!
library(corrplot)#!!!
library(randomForest)#!!!
####library(xlsx)#!!!
library(tdr)#!!!
library(tidyverse)#!!!
library(ggExtra)#!!!
#library(ggpp)#!!!
library(ggmap)
library(ggpubr)#!!!
library(readr)
library(tidyverse)#!!!
library(httr)
library(jsonlite)
library(ggmap)
library(gepaf)#!!!
library(dplyr)
library(lubridate)
library(foreach)
library(googlePolylines)
library(paletteer)
library(leaflet)
library(terra)
library(stars)
library(htmltools)
library(AirExposure)
remove.packages("AirExposure")
install.packages("D:/Josefina/paper_git/paper_exposure_model/code_09/AirExposure_1.0.tar.gz",dependencies=TRUE,repos=NULL,type="source")
install.packages("D:/Josefina/paper_git/paper_exposure_model/code_09/AirExposure_1.0.tar.gz",dependencies=TRUE,repos=NULL,type="source")
remove.packages("AirExposure")
######################################################################
####################################################################
# Concepto de ACP:
# Creación de un conjunto de datos ficticio
data <- data.frame(
region = paste("Region", 1:10),
ingresos = c(30000, 32000, 29000, 35000, 28000, 34000, 33000, 31000, 36000, 30000),
educacion = c(15, 14, 16, 15, 13, 17, 14, 15, 16, 14),
desempleo = c(4, 5, 6, 3, 7, 2, 5, 4, 3, 6),
esperanza_vida = c(78, 77, 79, 80, 76, 81, 77, 78, 79, 77)
)
# Mostrar los datos
print(data)
# Cargar la librería necesaria para ACP
library(stats)
# Eliminar la columna de región ya que no es numérica
data_num <- data[,-1]
# Aplicar el ACP
acp_resultado <- prcomp(data_num, scale. = TRUE)
# Resumen del ACP
summary(acp_resultado)
# Ver los coeficientes de ponderación (loadings) de cada variable en los componentes principales
print(acp_resultado$rotation)
# Ver los valores de los componentes principales para cada región
print(acp_resultado$x)
# Ver los coeficientes de ponderación (loadings) de cada variable en los componentes principales
print(acp_resultado$rotation)
# Ver los coeficientes de ponderación (loadings) de cada variable en los componentes principales
print(acp_resultado$rotation)
# Resumen del ACP
summary(acp_resultado)
# Cargar la librería psych
library(psych)
# Instalar el paquete psych si no está instalado
install.packages("psych")
####################################################################################
###################################################################################
#
# Realizar el ACP
acp_resultado <- prcomp(data_num, scale. = TRUE)
# Obtener la varianza explicada
var_exp <- acp_resultado$sdev^2 / sum(acp_resultado$sdev^2)
# Crear el gráfico de sedimentación
plot(var_exp, type = "b", main = "Gráfico de Sedimentación",
xlab = "Componentes Principales", ylab = "Varianza Explicada")
# Crear el gráfico de sedimentación
plot(var_exp, type = "b", main = "Gráfico de Sedimentación",
xlab = "Componentes Principales", ylab = "Varianza Explicada")
# Cargar la librería psych
library(psych)
# Crear un conjunto de datos ficticio
data <- data.frame(
item1 = c(4, 3, 5, 4, 2),
item2 = c(4, 2, 5, 4, 3),
item3 = c(5, 3, 4, 5, 2),
item4 = c(4, 4, 5, 3, 3)
)
# Calcular el Alfa de Cronbach
alpha_result <- alpha(data)
# Mostrar el resultado
print(alpha_result)
#Aquí te muestro cómo aplicar la rotación varimax después de realizar el ACP
#en un conjunto de dato
## Cargar las librerías necesarias
library(psych)
# Realizar el ACP (en este caso usando la función principal components analysis)
acp_resultado <- principal(data_num, nfactors = 3, rotate = "none")
# Aplicar la rotación varimax
acp_rotado <- principal(data_num, nfactors = 3, rotate = "varimax")
# Ver los resultados
print(acp_rotado)
library(ncdf4)
library(rhdf5)
install.packages("rhdf5")
library(googlePolylines)#!
library(paletteer)
library(leaflet)
library(ecmwfr)
library(htmltools)
library(ncdf4)
library(dplyr)
library(sp)
library(raster)
library(sf)
library(maps)
library(mapdata) #!!!
library(maptools)#!!!
#library(rgdal)
library(gdalUtilities)#!!!
####library(gpclib) #!!!
library(spatstat)#!!!
####library(RGtk2)
library(MODIStsp)
####library(MODIS)
library(ggplot2)
library(ggmap)
library(lubridate)
library(rgeos)
library(reshape2)#!!!
library(dplyr)
library(lmtest)#!!!
library(tm)#!!!
library(csv)#!!!
library(csvread)#!!!
library(R.utils)#!!!
library(lattice)
library(caret)#!!!
#### library(RStoolbox)#!!!
library(RColorBrewer)
library(openair)
library(gridExtra)
library(printr)#!!!
library(corrplot)#!!!
library(randomForest)#!!!
####library(xlsx)#!!!
library(tdr)#!!!
library(tidyverse)#!!!
library(ggExtra)#!!!
#library(ggpp)#!!!
library(ggmap)
library(ggpubr)#!!!
library(readr)
library(tidyverse)#!!!
library(httr)
library(jsonlite)
library(ggmap)
library(gepaf)#!!!
library(dplyr)
library(lubridate)
library(foreach)
library(googlePolylines)
library(paletteer)
library(leaflet)
library(terra)
library(stars)
library(htmltools)
### RGDAL t MAPTOOLs, sp dejan de funcionar
#Generando la grilla
crs_project = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
era.df<- data.frame()
ext = extent(-70.89626564382297,-70.54544288411844,-33.61652852593954,-33.33591657301113)#
crs_project <- "+proj=longlat +datum=WGS84"  # Ejemplo de CRS, ajusta seg?n sea necesario
# Calcular la resoluci?n del p?xel en grados
# Asumiendo que las coordenadas est?n en grados, por ejemplo, si 1 grado = 111 km
km_per_degree <- 111  # Aproximadamente 111 km por grado
punto <- cbind(lon = -70.659566, lat = -33.465694)  # Ejemplo con coordenadas de longitud y latitud
estacion <- "OHG"
#Variables: DMSSMASS,DMSSMASS, DUSMASS, OCSMASS, SO2SMASS, SO4SMASS, y SSSMASS
setwd("D:/Josefina/Proyectos/ProyectoChile/dataset/MERRA-2")
ext = extent(-70.89626564382297,-70.54544288411844,-33.61652852593954,-33.33591657301113)#
#raster_template <- raster(nrows = 86, ncols = 87,   crs = crs_project, ext =ext)
crs_project <- "+proj=longlat +datum=WGS84"  # Ejemplo de CRS, ajusta según sea necesario
# Calcular la resolución del píxel en grados
# Asumiendo que las coordenadas están en grados, por ejemplo, si 1 grado = 111 km
km_per_degree <- 111  # Aproximadamente 111 km por grado
pixel_size_km <- 1  # Tamaño de píxel deseado en km
# Calcular la resolución en grados
resolution_degrees <- pixel_size_km / km_per_degree
# Calcular el número de filas y columnas basados en la resolución
nrows <- (ext@ymax - ext@ymin) / resolution_degrees
ncols <- (ext@xmax - ext@xmin) / resolution_degrees
# Redondear a números enteros para filas y columnas
nrows <- ceiling(nrows)
ncols <- ceiling(ncols)
# Crear el raster con la extensión y resolución adecuada
raster_template <- raster(nrows = nrows, ncols = ncols, crs = crs_project, ext = ext)
getwd()
dire <- "D:/Josefina/Proyectos/ProyectoChile/dataset/MERRA-2"
setwd(dire)
id <- list.files(path = getwd(),
pattern = "*.nc",
full.names = FALSE)
id
nameVar <- c("BCSMASS","DMSSMASS", "DUSMASS","DUSMASS25", "OCSMASS", "SO2SMASS", "SO4SMASS", "SSSMASS","SSSMASS25")
df_rbind <- data.frame()
length(id)
nameVar <- c("BCSMASS","DMSSMASS", "DUSMASS","DUSMASS25", "OCSMASS", "SO2SMASS", "SO4SMASS", "SSSMASS","SSSMASS25")
df_rbind <- data.frame()
for (i in 1:length(id)){
#print(paste("Esto es i = ", i, sep= ""))
archivo_nc = id[i]
df_rbind_2 <- data.frame()
for (num_sds in 1:length(nameVar)){
name_sds<- nameVar[num_sds] #substring(sds[num_sds],31)
MIRRAraster <- raster(archivo_nc,varname=name_sds)
unit<- MIRRAraster@data@unit
date <- substr(archivo_nc,29,36)
crs_project <- "+proj=longlat +datum=WGS84"
MIRRAraster2 <- projectRaster(MIRRAraster,
crs = crs_project,
method = "bilinear")
rst_resampling <- raster::resample(MIRRAraster2, raster_template)
# Definir las coordenadas del punto
valor <- extract(rst_resampling, punto)
df <- data.frame (date= date,variable = name_sds, unidad=unit, value=valor,estacion=estacion)
df_rbind <- rbind(df_rbind,df)
}
df_rbind_2<- rbind(df_rbind_2,df_rbind)
}
archivo_nc
df_rbind <- data.frame()
df_rbind_2 <- data.frame()
for (i in 1:length(id)){
print(i)
#print(paste("Esto es i = ", i, sep= ""))
archivo_nc = id[i]
for (num_sds in 1:length(nameVar)){
name_sds<- nameVar[num_sds] #substring(sds[num_sds],31)
MIRRAraster <- raster(archivo_nc,varname=name_sds)
unit<- MIRRAraster@data@unit
date <- substr(archivo_nc,29,36)
crs_project <- "+proj=longlat +datum=WGS84"
MIRRAraster2 <- projectRaster(MIRRAraster,
crs = crs_project,
method = "bilinear")
rst_resampling <- raster::resample(MIRRAraster2, raster_template)
# Definir las coordenadas del punto
valor <- extract(rst_resampling, punto)
df <- data.frame (date= date,variable = name_sds, unidad=unit, value=valor,estacion=estacion)
df_rbind <- rbind(df_rbind,df)
}
df_rbind_2<- rbind(df_rbind_2,df_rbind)
}
View(df_rbind_2)
df_rbind <- data.frame()
df_rbind_2 <- data.frame()
for (i in 1:length(id)){
print(i)
#print(paste("Esto es i = ", i, sep= ""))
archivo_nc = id[i]
for (num_sds in 1:length(nameVar)){
name_sds<- nameVar[num_sds] #substring(sds[num_sds],31)
MIRRAraster <- raster(archivo_nc,varname=name_sds)
unit<- MIRRAraster@data@unit
date <- substr(archivo_nc,28,35)
crs_project <- "+proj=longlat +datum=WGS84"
MIRRAraster2 <- projectRaster(MIRRAraster,
crs = crs_project,
method = "bilinear")
rst_resampling <- raster::resample(MIRRAraster2, raster_template)
# Definir las coordenadas del punto
valor <- extract(rst_resampling, punto)
df <- data.frame (date= date,variable = name_sds, unidad=unit, value=valor,estacion=estacion)
df_rbind <- rbind(df_rbind,df)
}
df_rbind_2<- rbind(df_rbind_2,df_rbind)
}
View(df_rbind_2)
View(df)
View(df_rbind)
df_rbind_2 <- data.frame()
for (i in 1:length(id)){
print(i)
#print(paste("Esto es i = ", i, sep= ""))
archivo_nc = id[i]
df_rbind <- data.frame()
for (num_sds in 1:length(nameVar)){
name_sds<- nameVar[num_sds] #substring(sds[num_sds],31)
MIRRAraster <- raster(archivo_nc,varname=name_sds)
unit<- MIRRAraster@data@unit
date <- substr(archivo_nc,28,35)
crs_project <- "+proj=longlat +datum=WGS84"
MIRRAraster2 <- projectRaster(MIRRAraster,
crs = crs_project,
method = "bilinear")
rst_resampling <- raster::resample(MIRRAraster2, raster_template)
# Definir las coordenadas del punto
valor <- extract(rst_resampling, punto)
df <- data.frame (date= date,variable = name_sds, unidad=unit, value=valor,estacion=estacion)
df_rbind <- rbind(df_rbind,df)
}
df_rbind_2<- rbind(df_rbind_2,df_rbind)
}
View(df_rbind_2)
getwd()
setwd("D:/Josefina/Proyectos/ProyectoChile/code")
